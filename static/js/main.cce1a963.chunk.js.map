{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Cardfile/index.js","components/DaRules/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Nav","id","href","msg","score","highScore","CardFile","value","onClick","clickHandler","alt","name","src","image","DaRules","App","state","images","clickedImages","totalClick","this","includes","setState","displayMessage","concat","Object","toConsumableArray","sort","Math","random","_this2","Fragment","Navbar","components_DaRules","components_Wrapper","map","pic","Cardfile","key","handleShuffle","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q7BAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCe1BC,MAhBf,SAAaN,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASG,GAAG,WACvBN,EAAAC,EAAAC,cAAA,KAAGI,GAAG,YAAYC,KAAK,KACrBP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBJ,EAAMS,KAE1CR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UACQJ,EAAMU,MADd,iBACmCV,EAAMW,mBCAhCC,MAVjB,SAAkBZ,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOS,MAAOb,EAAMO,GAAIO,QAAS,kBAAMd,EAAMe,aAAaf,EAAMO,MAC7EN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKa,IAAKhB,EAAMiB,KAAMC,IAAKlB,EAAMmB,kBCK5BC,MAVf,WACI,OACInB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,iGCgEDkB,6MA9DbC,MAAQ,CACNC,OAAQA,EACRC,cAAe,GACfd,MAAO,EACPC,UAAW,EACXc,WAAY,gFAGElB,GACTmB,KAAKJ,MAAME,cAAcG,SAASpB,GAcrCmB,KAAKE,SAAS,CACZlB,MAAO,EACPmB,eAAgB,+BAChBL,cAAe,KAhBjBE,KAAKE,SAAS,CACZlB,MAAOgB,KAAKJ,MAAMZ,MAAQ,EAC1BmB,eACEH,KAAKJ,MAAMZ,MAAQ,IAAM,GACrB,uBACA,2BACNc,cAAa,GAAAM,OAAAC,OAAAC,EAAA,EAAAD,CAAML,KAAKJ,MAAME,eAAjB,CAAgCjB,IAC7CI,UACEe,KAAKJ,MAAMZ,MAAQ,EAAIgB,KAAKJ,MAAMX,UAC9Be,KAAKJ,MAAMZ,MAAQ,EACnBgB,KAAKJ,MAAMX,YASrBe,KAAKE,SAAS,CACZL,OAAQA,EAAOU,KAAK,kBAAMC,KAAKC,SAAW,KAC1CV,WAAYC,KAAKJ,MAAMG,WAAa,qCAIjC,IAAAW,EAAAV,KACP,OACEzB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmC,SAAA,KACApC,EAAAC,EAAAC,cAACmC,EAAD,CACE5B,MAAOgB,KAAKJ,MAAMZ,MAClBC,UAAWe,KAAKJ,MAAMX,UACtBF,IAAKiB,KAAKJ,MAAMO,iBAElB5B,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,KACGd,KAAKJ,MAAMC,OAAOkB,IACjB,SAAAC,GAAG,OACDzC,EAAAC,EAAAC,cAACwC,EAAD,CACAC,IAAKF,EAAInC,GACTU,KAAMyB,EAAIzB,KACVE,MAAOuB,EAAIvB,MACXJ,aAAc,kBAAMqB,EAAKS,cAAcH,EAAInC,kBApDnCuC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cce1a963.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\" id=\"tarotbg\">\n        <a id=\"game-name\" href=\"/\">\n          <h2 className=\"ml-2\">Tarot Shuffle</h2>\n        </a>\n\n        <div className=\"guess text-center\">{props.msg}</div>\n\n        <div className=\"guess mr-2\">\n        Score: {props.score} | Top Score: {props.highScore}\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CardFile(props) {\n    return (\n      <div className=\"card\" value={props.id} onClick={() => props.clickHandler(props.id)}>\n        <div className=\"img-container\">\n          <img alt={props.name} src={props.image} />\n        </div>\n      </div>\n    );\n  }\n  \n  export default CardFile;","import React from \"react\";\n\nfunction DaRules() {\n    return (\n        <ul className=\"nav justify-content-center\">\n            <li className=\"nav-item\">\n                <p>Click on a card to start the game. Don't click on the same card twice. Good luck!</p>\n            </li>\n        </ul>\n    )\n};\n\nexport default DaRules;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport CardFile from \"./components/Cardfile\";\nimport images from \"./images.json\";\nimport DaRules from \"./components/DaRules\";\n\nclass App extends Component {\n  state = {\n    images: images,\n    clickedImages: [],\n    score: 0,\n    highScore: 0,\n    totalClick: 0\n  };\n  \n    handleShuffle(id) {\n    if (!this.state.clickedImages.includes(id)) {\n      this.setState({\n        score: this.state.score + 1,\n        displayMessage:\n          this.state.score + 1 === 12\n            ? \"You won! Play again?\"\n            : \"How good is your memory?\",\n        clickedImages: [...this.state.clickedImages, id],\n        highScore:\n          this.state.score + 1 > this.state.highScore\n            ? this.state.score + 1\n            : this.state.highScore\n      });\n    } else {\n      this.setState({\n        score: 0,\n        displayMessage: \"Bummer! You lost. Try again?\",\n        clickedImages: []\n      });\n    }\n    this.setState({\n      images: images.sort(() => Math.random() - 0.5),\n      totalClick: this.state.totalClick + 1\n    });\n  }\n\nrender() {\n  return (\n    <>\n    <Navbar\n      score={this.state.score}\n      highScore={this.state.highScore}\n      msg={this.state.displayMessage}\n    />\n    <DaRules />\n    <Wrapper>\n      {this.state.images.map(\n        pic => (\n          <CardFile\n          key={pic.id}\n          name={pic.name}\n          image={pic.image}\n          clickHandler={() => this.handleShuffle(pic.id)}\n          />\n        )\n      )}\n    </Wrapper>\n    </>\n  );\n  }\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}